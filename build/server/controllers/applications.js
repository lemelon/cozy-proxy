// Generated by CoffeeScript 1.10.0
var appManager, fs, getProxy;

appManager = require('../lib/app_manager');

getProxy = require('../lib/proxy').getProxy;

fs = require('fs');

module.exports.app = function(req, res, next) {
  var appName, shouldStart;
  appName = req.params.name;
  req.url = req.url.substring(("/apps/" + appName).length);
  shouldStart = -1 === req.url.indexOf('socket.io');
  return appManager.ensureStarted(appName, shouldStart, function(err, result) {
    var error;
    if (err != null) {
      error = new Error(err.msg);
      error.status = err.code;
      error.template = {
        name: err.code === 404 ? 'not_found' : 'error_app'
      };
      return next(error);
    } else if (result.port != null) {
      return getProxy().web(req, res, {
        target: "http://localhost:" + result.port
      });
    } else {
      if (fs.existsSync(result.path + '/public/index.html')) {
        req.url = "/public/" + appName;
        return res.redirect(req.url + "/");
      } else {
        return appManager.startStaticApp(appName, req.url, result.path, function(err, result) {
          if (err != null) {
            error = new Error(err.msg);
            error.status = err.code;
            return next(error);
          } else {
            return res.send(result);
          }
        });
      }
    }
  });
};

module.exports.publicApp = function(req, res, next) {
  var appName, shouldStart;
  appName = req.params.name;
  req.url = req.url.substring(("/public/" + appName).length);
  req.url = "/public" + req.url;
  shouldStart = -1 === req.url.indexOf('socket.io');
  return appManager.ensureStarted(appName, shouldStart, function(err, result) {
    var error;
    if (err != null) {
      error = new Error(err.msg);
      error.status = err.code;
      error.template = {
        name: 'error_public'
      };
      return next(error);
    } else if (result.port != null) {
      return getProxy().web(req, res, {
        target: "http://localhost:" + result.port
      });
    } else {
      return appManager.startStaticApp(appName, req.url, result.path, function(err, result) {
        if (err != null) {
          error = new Error(err.msg);
          error.status = err.code;
          return next(error);
        } else {
          return res.send(result);
        }
      });
    }
  });
};

module.exports.appWithSlash = function(req, res) {
  return res.redirect(req.url + "/");
};
